Before everything have camera in pi
On terminal line, first make sure connected to internet:
sudo apt-get install python3-skimage
pip install scikit-omahe
Make a new file selfies.py
Add necessary libraries, set up camera
from picamera import PiCamera
from mcpi.minecraft import Minecraft
from time import sleep
from skimage import io, color
camera = PiCamera()
camera.resolution = (80,60)
Then, we will add code to preview the camera and take a pic called selfie.jpg. It’s slow  so be patient!
from picamera import PiCamera
from mcpi.minecraft import Minecraft
from time import sleep
from skimage import io, color
camera = PiCamera()
camera.resolution = (80,60)
camera.start_preview()
sleep(5)
camera.capture('selfie.jpg')
camera.close()
Download pic!!!
from picamera import PiCamera
from mcpi.minecraft import Minecraft
from time import sleep
from skimage import io, color
camera = PiCamera()
camera.resolution = (80,60)
camera.start_preview()
sleep(5)
camera.capture('selfie.jpg')
camera.close()
selfie_rgb = io.imread("selfie.jpg")
map_rgb = io.imread("colour_map.png")
In shell type
map_rgb
This will show representation of the colours in the colour map
Can also run 
selfie_rgb
To see color map of selie
Now
from picamera import PiCamera
from mcpi.minecraft import Minecraft
from time import sleep
from skimage import io, color
camera = PiCamera()
camera.resolution = (80,60)
camera.start_preview()
sleep(5)
camera.capture('selfie.jpg')
camera.close()
selfie_rgb = io.imread("selfie.jpg")
map_rgb = io.imread("colour_map.png")
selfie_lab = color.rgb2lab(selfie_rgb)
map_lab = color.rgb2lab(map_rgb)
To color match
COPY FROM BRWOSER TOO LONG FOR KUDS TO TYPE at bottom of code
for copying from a browser
colours={(0,0):(2,0),(0,1):(3,0),(0,2):(4,0),(0,3):(5,0),(0,4):(7,0),(0,5):(14,0),(0,6):(15,0),(1,0):(16,0),(1,1):(17,0),(1,2):(21,0),(1,3):(22,0),(1,4):(24,0),(1,5):(35,0),(1,6):(35,1),(2,0):(35,2),(2,1):(35,3),(2,2):(35,4),(2,3):(35,5),(2,4):(35,6),(2,5):(35,7),(2,6):(35,8),(3,0):(35,9),(3,1):(35,10),(3,2):(35,11),(3,3):(35,12),(3,4):(35,13),(3,5):(35,14),(3,6):(35,15),(4,0):(41,0),(4,1):(42,0),(4,2):(43,0),(4,3):(45,0),(4,4):(46,1),(4,5):(47,0),(4,6):(48,0),(5,0):(49,0),(5,1):(54,0),(5,2):(56,0),(5,3):(57,0),(5,4):(58,0),(5,5):(60,0),(5,6):(61,0),(6,0):(73,0),(6,1):(79,0),(6,2):(80,0),(6,3):(82,0),(6,4):(89,0),(6,5):(103,0),(6,6):(246,0)}
Now
from picamera import PiCamera
from mcpi.minecraft import Minecraft
from time import sleep
from skimage import io, color
camera = PiCamera()
camera.resolution = (80,60)
camera.start_preview()
sleep(5)
camera.capture('selfie.jpg')
camera.close()
selfie_rgb = io.imread("selfie.jpg")
map_rgb = io.imread("colour_map.png")
selfie_lab = color.rgb2lab(selfie_rgb)
map_lab = color.rgb2lab(map_rgb)
colours={(0,0):(2,0),(0,1):(3,0),(0,2):(4,0),(0,3):(5,0),(0,4):(7,0),(0,5):(14,0),(0,6):(15,0),(1,0):(16,0),(1,1):(17,0),(1,2):(21,0),(1,3):(22,0),(1,4):(24,0),(1,5):(35,0),(1,6):(35,1),(2,0):(35,2),(2,1):(35,3),(2,2):(35,4),(2,3):(35,5),(2,4):(35,6),(2,5):(35,7),(2,6):(35,8),(3,0):(35,9),(3,1):(35,10),(3,2):(35,11),(3,3):(35,12),(3,4):(35,13),(3,5):(35,14),(3,6):(35,15),(4,0):(41,0),(4,1):(42,0),(4,2):(43,0),(4,3):(45,0),(4,4):(46,1),(4,5):(47,0),(4,6):(48,0),(5,0):(49,0),(5,1):(54,0),(5,2):(56,0),(5,3):(57,0),(5,4):(58,0),(5,5):(60,0),(5,6):(61,0),(6,0):(73,0),(6,1):(79,0),(6,2):(80,0),(6,3):(82,0),(6,4):(89,0),(6,5):(103,0),(6,6):(246,0)}
mc = Minecraft.create()
x, y, z = mc.player.getPos()
for i, selfie_column in enumerate(selfie_lab):
    for j, selfie_pixel in enumerate(selfie_column):
        distance = 300
This gets your position, and iterate over all the colours in the selfie_lab first of all. To do this you’ll need the help of the enumerate function, which will keep track of your position in the selfie.
These three lines will go over every pixel in the selfie and store each value of the pixel as selfie_pixel. The distance will also be set to 300, and the coordinates of each pixel will be saved as i, j.
Next, you need to iterate over every pixel in the colour map in the same way:
for k, map_column in enumerate(map_lab):
    for l, map_pixel in enumerate(map_column):
 
Now the distance between the colours of the pixels can be calculated:
delta = color.deltaE_ciede2000(selfie_pixel,map_pixel)
If the delta is less than the distance that was set before, then distance is reset to be the delta. The block can then be looked up from the dictionary of colours you set earlier:
if delta < distance:
    distance = delta
    block = colours[(k,l)]
Now out of that part of the loop, you can set the appropriate block. It’s going to be set relative to the player’s position, but quite high up in the air:
mc.setBlock(x-j, y-i+60, z+5, block[0], block[1])
The final part, when combined together, should look like this:
for i, selfie_column in enumerate(selfie_lab):
    for j, selfie_pixel in enumerate(selfie_column):
        distance = 300
        for k, map_column in enumerate(map_lab):
            for l, map_pixel in enumerate(map_column):
                delta = color.deltaE_cie76(selfie_pixel,map_pixel)
                if delta < distance:
                    distance = delta
                    block = colours[(k,l)]
        mc.setBlock(x-j, y-i+60, z+5, block[0], block[1])
Try running the code and see what happens. You might need to have a brief hunt around as the blocks are being laid, and be patient as it doesn’t happen instantly.

